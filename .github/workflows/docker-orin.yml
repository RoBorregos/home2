name: Build and Push Orin Docker Images

on:
  push:
    branches:
      - main
      - stable
    paths:
      - "docker/**"
      - "hri/**"
      - "manipulation/**"
      - "navigation/**"
      - "vision/**"
      - ".github/workflows/docker-orin.yml"
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: "Version tag for images"
        required: false
        default: "latest"

env:
  REGISTRY: docker.io
  IMAGE_PREFIX: roborregos/home2

jobs:
  build-base:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_PREFIX }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push L4T base image
        uses: docker/build-push-action@v5
        with:
          context: ./docker
          file: ./docker/Dockerfile.ROS
          build-args: |
            BASE_IMAGE=dustynv/l4t-pytorch:r36.4.0
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}:l4t_base-latest
            ${{ env.IMAGE_PREFIX }}:l4t_base-${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}:l4t_base-latest
          cache-to: type=inline

  build-hri:
    needs: build-base
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push HRI L4T image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/hri/dockerfiles/Dockerfile.ROS
          build-args: |
            BASE_IMAGE=${{ env.IMAGE_PREFIX }}:l4t_base-latest
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}:hri-l4t-latest
            ${{ env.IMAGE_PREFIX }}:hri-l4t-${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}:hri-l4t-latest
          cache-to: type=inline

  build-manipulation:
    needs: build-base
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Manipulation Jetson image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/manipulation/Dockerfile.jetson
          build-args: |
            BASE_IMAGE=${{ env.IMAGE_PREFIX }}:l4t_base-latest
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}:manipulation-jetson-latest
            ${{ env.IMAGE_PREFIX }}:manipulation-jetson-${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}:manipulation-jetson-latest
          cache-to: type=inline

  build-navigation:
    needs: build-base
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Navigation Jetson image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/navigation/Dockerfile.jetson
          build-args: |
            BASE_IMAGE=${{ env.IMAGE_PREFIX }}:l4t_base-latest
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}:navigation-jetson-latest
            ${{ env.IMAGE_PREFIX }}:navigation-jetson-${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}:navigation-jetson-latest
          cache-to: type=inline

  build-vision:
    needs: build-base
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Vision Jetson image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/vision/Dockerfile.jetson
          build-args: |
            BASE_IMAGE=${{ env.IMAGE_PREFIX }}:l4t_base-latest
          push: true
          tags: |
            ${{ env.IMAGE_PREFIX }}:vision-jetson-latest
            ${{ env.IMAGE_PREFIX }}:vision-jetson-${{ github.sha }}
          cache-from: type=registry,ref=${{ env.IMAGE_PREFIX }}:vision-jetson-latest
          cache-to: type=inline
